{
  "Beefree: Secure Server-Side Auth (Node.js/Express)": {
    "prefix": "b-init-server",
    "body": [
      "const express = require('express');",
      "// const fetch = require('fetch'); for Node.js version <18 or your preferred HTTP client",
      "const Joi = require('joi')",
      "const rateLimit = require('express-rate-limit')",
      "const app = express();",
      "const port = 3000;",
      "",
      "const apiLimiter = rateLimit({",
      " windowMs: 15*60*1000, //15 minutes",
      " max: 100, //100 requests per window",
      " standardHeaders: true,",
      " legacyHeaders: false,",
      " message: 'Too many requests from this IP, please try again after 15 minutes'});",
      "",
      "const tokenRequestSchema = Joi.object({uid: Joi.string().min(1).required()});",
      "// Endpoint your frontend will call to get a token",
      "app.post('/get-beefree-token', apiLimiter, express.json(), async (req, res) => {",
      "const {error, value} = tokenRequestSchema.validate(req.body);",
      "if (error) {",
      " return res.status(400).send({error: error.details[0].message });",
      "}",
      "  const { uid } = value; // Get the user ID from the frontend request",
      "",
      "  const BEEFREE_CLIENT_ID = process.env.BEEFREE_CLIENT_ID || '${1:your_client_id_here}';",
      "  const BEEFREE_CLIENT_SECRET = process.env.BEEFREE_CLIENT_SECRET || '${2:your_client_secret_here}';",
      "",
      "  try {",
      "    const authResponse = await fetch('https://auth.getbee.io/loginV2', {",
      "      method: 'POST',",
      "      headers: { 'Content-Type': 'application/json' },",
      "      body: JSON.stringify({",
      "        client_id: BEEFREE_CLIENT_ID,",
      "        client_secret: BEEFREE_CLIENT_SECRET,",
      "        uid: uid",
      "      })",
      "    });",
      "",
      "    if (!authResponse.ok) {",
      "      console.error(`Beefree auth failed with status: ${authResponse.status}`);",
      "    return res.status(502).send({error: 'Authentication provider returned an error. Please check your credentials.'});",
      "    }",
      "",
      "    const tokenData = await authResponse.json();",
      "    res.send(tokenData); // Send the access_token back to the frontend",
      "  } catch (error) {",
      "    console.error('Error fetching Beefree token:', error);",
      "    res.status(500).send({ error: 'Failed to authenticate with Beefree.' });",
      "  }",
      "});",
      "",
      "app.listen(port, () => {",
      "  console.log(`Server listening at http://localhost:${port}`);",
      "});"
    ],
    "description": "Creates a secure Node.js/Express endpoint to handle Beefree SDK server-side authentication."
  },
  "Beefree: Client-Side Initialization": {
    "prefix": "b-init-client",
    "body": [
      "async function initializeBeefreeEditor(userId) {",
      "  try {",
      "    // 1. Fetch the token from your secure backend endpoint",
      "    const response = await fetch('/get-beefree-token', {",
      "      method: 'POST',",
      "      headers: { 'Content-Type': 'application/json' },",
      "      body: JSON.stringify({ uid: userId })",
      "    });",
      "    const tokenData = await response.json();",
      "    const token = tokenData.access_token;",
      "",
      "    // 2. Define the Beefree configuration",
      "    const beeConfig = {",
      "      uid: userId,",
      "      container: '${1:bee-plugin-container}',",
      "      // Add other configuration options here",
      "      onSave: (templateJson) => {",
      "        console.log('Template saved!', templateJson);",
      "        // Send the JSON to your server to save it",
      "      },",
      "      onError: (errorMessage) => {",
      "        console.error('An error occurred:', errorMessage);",
      "      }",
      "    };",
      "",
      "    // 3. Create an instance of the Beefree SDK",
      "    const bee = await BeefreeSDK.create(token, beeConfig);",
      "",
      "    // 4. Start the editor with a blank template or a saved template",
      "    const blankTemplate = { /* A blank template JSON */ };",
      "    bee.start(blankTemplate);",
      "",
      "    return bee; // Return the instance for later use",
      "  } catch (error) {",
      "    console.error('Failed to initialize Beefree editor:', error);",
      "  }",
      "}",
      "",
      "// Example usage:",
      "const currentUserId = 'user-12345';",
      "initializeBeefreeEditor(currentUserId);"
    ],
    "description": "Initializes the Beefree SDK on the client-side using a secure token from your backend."
  },
  "Beefree: Basic Configuration Object": {
    "prefix": "b-config",
    "body": [
      "const beeConfig = {",
      "  uid: '${1:user-unique-identifier}', // Must match the UID used for authentication",
      "  container: '${2:bee-plugin-container}', // The ID of the HTML element to render in",
      "  language: 'en-US',",
      "  // --- Callbacks ---",
      "  onSave: (templateJson) => {",
      "    console.log('Template saved:', templateJson);",
      "    // Your logic to save the JSON to your database",
      "  },",
      "  onSaveAsTemplate: (templateJson) => {",
      "    console.log('Template saved as a new template:', templateJson);",
      "  },",
      "  onAutoSave: (templateJson) => {",
      "    console.log('Template auto-saved:', templateJson);",
      "  },",
      "  onError: (errorMessage) => {",
      "    console.error('An error occurred:', errorMessage);",
      "  }",
      "};"
    ],
    "description": "A standard configuration object for the Beefree SDK."
  },
  "Beefree: onSave Callback": {
    "prefix": "b-save",
    "body": [
      "onSave: (templateJson) => {",
      "  console.log('Template saved!', templateJson);",
      "  // Example: Send the JSON to your server to save it",
      "  fetch('/api/save-template', {",
      "    method: 'POST',",
      "    headers: { 'Content-Type': 'application/json' },",
      "    body: templateJson",
      "  });",
      "}"
    ],
    "description": "The onSave callback function, triggered when the user clicks the save button."
  },
  "Beefree: Load Template": {
    "prefix": "b-load",
    "body": [
      "// Assuming 'bee' is your initialized SDK instance",
      "// and 'templateToLoad' is a valid template JSON object",
      "bee.load(templateToLoad);"
    ],
    "description": "Loads a new template into an initialized editor instance."
  },
  "Beefree: HTML Container": {
    "prefix": "b-container",
    "body": [
      "<div id=\"${1:bee-plugin-container}\" style=\"height: 800px; width: 100%;\"></div>"
    ],
    "description": "The HTML div element to serve as the container for the Beefree editor."
  },
  "Beefree: Load Template from Database": {
    "prefix": "b-load-db",
    "body": [
      "// --- Load a saved template from your backend ---",
      "// 'bee' is your initialized SDK instance",
      "// 'templateId' is the unique ID of the template stored in your database",
      "async function loadTemplateFromDb(bee, templateId) {",
      "  try {",
      "    console.log(`Fetching template with ID: ${templateId}...`);",
      "    const response = await fetch(`/api/templates/${templateId}`);",
      "",
      "    if (!response.ok) {",
      "      throw new Error(`Failed to fetch template. Status: ${response.status}`);",
      "    }",
      "",
      "    const templateJson = await response.json();",
      "",
      "    // Use the load() method to render the template in the editor",
      "    bee.load(templateJson);",
      "    console.log('Template loaded successfully!');",
      "  } catch (error) {",
      "    console.error('Error loading template from database:', error);",
      "    // Optionally, call an error handler in your UI",
      "    // bee.showError({ title: 'Load Error', message: 'Could not load the template.' });",
      "  }",
      "}",
      "",
      "// Example usage:",
      "// loadTemplateFromDb(myBeeInstance, 'template-abc-123');"
    ],
    "description": "Fetches a template's JSON from your server and loads it into the editor."
  },
  "Beefree: Configuration for Multi-Tenancy (Workspaces)": {
    "prefix": "b-config-multitenant",
    "body": [
      "// --- Configuration for a multi-tenant application ---",
      "// This ensures each of your customers gets their own isolated File Manager.",
      "",
      "const teamId = '${1:your_customer_or_team_id}'; // e.g., 'acme-corp-123'",
      "",
      "const beeConfig = {",
      "  uid: '${2:user-unique-identifier}',",
      "  container: '${3:bee-plugin-container}',",
      "  // The 'workspace' config isolates File Manager assets",
      "  workspace: {",
      "    provider: 'external', // Indicates you are managing the folder structure",
      "    // The 'root' path is a base folder for all your tenants",
      "    root: {",
      "      name: 'All Customers'",
      "    },",
      "    // The 'path' is the unique, isolated folder for this specific tenant",
      "    path: {",
      "      id: teamId,",
      "      name: `Files for ${teamId}`",
      "    }",
      "  },",
      "  onSave: (templateJson) => {",
      "    console.log('Template saved:', templateJson);",
      "  },",
      "  onError: (errorMessage) => {",
      "    console.error('An error occurred:', errorMessage);",
      "  }",
      "};"
    ],
    "description": "A configuration object showing how to use Workspaces for multi-tenant applications."
  }
}
